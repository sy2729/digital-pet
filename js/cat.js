
riot.tag2('cat-behaviour', '<div class="sounds"> <audio src="sound/pat.wav" ref="pat" autostart="false"></audio> <audio src="sound/feed.wav" ref="feed" autostart="false"></audio> <audio src="sound/beat.wav" ref="beat" autostart="false"></audio> <audio src="sound/touch.wav" ref="touch" autostart="false"></audio> <audio src="sound/kick.wav" ref="kick" autostart="false"></audio> <audio src="sound/shower.wav" ref="shower" autostart="false"></audio> <audio src="sound/eat.wav" ref="eat" autostart="false"></audio> </div> <div class="row" id="{die-shade: die}"> <div class="small-2 colums"> <div class="row"> <div class="small-2 columns"> <div class="button-group"> <a class="button" onclick="{pat}">PAT</a> <a class="button" onclick="{touch}">TOUCH</a> <a class="button" onclick="{feed}">FEED</a> <a class="button" onclick="{beat}">BEAT</a> <a class="button" onclick="{kick}">KICK</a> <a class="button" onclick="{play}">PLAY</a> <a class="button" onclick="{shower}">SHOWER</a> <a class="button" onclick="{eat}">EAT</a> </div> </div> </div> </div> <div class="small-6 colums"> <svg width="663px" height="696px" viewbox="0 0 663 696" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="cat"> <desc>Created with Sketch.</desc> <defs></defs> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="cat" fill-rule="nonzero"> <path class="{catColor1: catColor1, catColor2: catColor2, catColor3: catColor3, catColor4: catColor4,}" id="cat-svg" d="M384.73553,695.47499 C370.31428,695.10599 356.07612,692.75623 341.73553,691.52002 C325.27553,690.28448 301.00383,683.52882 291.70073,677.59356 C279.58383,669.86317 277.06283,663.65853 272.19343,629.5813 C270.53463,617.97194 260.53903,581.45026 254.95103,566.5813 C253.58333,562.94189 251.37273,555.17407 246.12913,535.5813 C240.06613,512.92691 233.90263,481.58123 231.28363,460.0813 C230.00363,449.57338 228.46553,444.45132 227.02323,445.89361 C226.45843,446.45839 226.50353,449.10233 227.13923,452.69925 C227.71093,455.93438 228.89383,463.5313 229.76783,469.5813 C230.64183,475.6313 232.19483,483.9563 233.21883,488.0813 C236.46852,501.67204 238.79001,515.46077 241.90443,529.0813 C243.98053,537.73059 255.15443,575.17837 260.72833,592.16716 C267.14653,611.72915 271.00273,627.44276 272.80723,641.3863 C273.67523,648.09355 275.01773,656.60544 275.79043,660.30162 C277.17573,666.92716 276.91293,669.87475 274.80853,671.31623 C262.06673,676.75461 247.90285,676.88715 234.37583,679.11928 C225.58143,680.65294 197.59527,682.55841 184.73554,682.4991 C169.41118,683.12188 154.5787,680.11346 139.73554,676.99713 C128.50515,674.71717 120.02738,670.64402 113.84171,664.55639 C107.06381,657.88592 102.45086,649.59921 100.56393,640.70414 C97.615155,626.80355 101.0262,615.45761 111.7853,603.3792 C122.62861,591.20627 134.77962,586.44736 152.60308,587.39302 C167.25398,585.19282 180.39883,594.35804 194.31285,595.53352 C195.5394,594.77547 194.79497,581.94699 193.06799,574.0813 C191.77623,568.19785 186.43179,522.07496 186.17349,514.5813 C185.98661,509.15966 184.1785,483.65347 183.74003,480.25352 C182.92215,472.87639 182.49531,465.46382 181.72846,458.0813 C181.09256,452.36492 180.80075,432.20823 181.19001,420.88788 C181.48266,412.37713 181.41676,412.09346 178.05389,407.38788 C169.2867,395.12018 166.97303,380.21442 171.1373,362.828 C173.84538,351.52141 175.61562,346.86342 179.85976,339.87681 C183.51043,333.86716 195.45976,321.19179 199.69133,318.84027 C208.71389,313.23698 217.75784,307.26361 227.98553,304.09208 C231.14653,304.06483 228.18753,301.97254 214.50643,294.56079 C195.25579,284.1318 187.12128,278.76805 178.74015,270.97717 C161.28096,254.74757 153.47209,245.77098 143.27196,230.20515 C139.30321,224.14868 135.30894,219.03722 134.3958,218.84636 C132.86432,218.52625 120.20042,222.64734 109.30389,227.01177 C102.52244,229.72797 84.584135,234.87806 74.735534,236.93634 C53.635464,241.3461 36.162582,240.01311 28.637592,233.41956 C25.814112,230.94557 23.923362,224.82424 24.748282,220.82784 C26.062172,214.46255 32.433562,206.5933 38.735532,203.55228 C41.717104,202.11353 54.216064,198.39928 59.497774,197.38248 C63.136274,196.68202 64.048304,195.0813 60.808904,195.0813 C55.209624,195.0813 48.119044,197.32465 36.741632,202.69582 C31.410902,205.2124 25.308712,211.4508 22.181162,217.5813 C19.880162,222.09163 19.262992,222.61201 15.879262,222.89487 C11.100182,223.29436 3.9532325,219.29698 2.4246625,215.36952 C-1.5017375,205.28119 -0.86730753,201.34775 5.8588125,194.07811 C11.834972,187.61904 26.536022,178.84879 38.235532,174.76303 C39.060534,174.47492 38.156952,174.20367 36.227582,174.16025 C30.882864,174.46786 26.343753,177.59573 21.485532,179.51951 C19.484582,180.13897 19.235532,179.8712 19.235532,177.1003 C19.235532,174.55045 20.567632,172.67649 26.569622,166.78291 C32.692512,160.77063 35.530592,158.85133 43.754814,155.16119 C55.945454,149.69135 68.158984,145.08974 70.499104,145.08493 C76.004244,143.80942 81.180165,141.37658 86.735535,140.01521 C93.312305,138.57743 110.55073,132.22047 113.23554,130.24289 C114.61054,129.23009 116.32696,127.19529 117.04981,125.72111 C118.19387,123.38792 118.0831,122.29875 116.19449,117.31105 C114.73957,113.46868 113.9867,109.11081 113.90893,104.0813 C113.74443,93.443298 117.00224,87.616358 126.71051,81.184328 C135.16998,75.579655 139.13653,74.120205 146.36238,73.953625 C154.409,73.768125 159.29727,76.784745 161.9635,83.581298 C163.58271,87.708888 163.70369,90.166398 162.80927,100.76138 C162.25654,107.30877 162.39457,111.03695 163.29059,113.76138 C164.43548,117.24255 169.1319,123.11894 175.02086,128.43889 C178.38895,131.48154 181.63635,143.04928 180.89045,149.34726 C180.32976,154.08142 180.68517,155.20963 186.29338,166.49804 C192.57205,179.13597 195.88667,184.8561 201.10783,192.0637 L204.23554,196.38138 C204.40464,193.1356 204.50155,189.89077 204.3724,186.64295 C203.90096,170.16646 208.41579,154.2846 214.26573,139.0813 C216.03373,134.42915 220.06673,128.46511 228.80423,117.5813 C236.84293,107.56784 238.09483,106.19299 244.00933,100.88207 C246.27513,98.847488 249.30553,94.695748 250.74353,91.655988 C253.73643,85.329498 261.93713,77.522685 266.67513,76.489645 C269.34513,75.907505 271.42993,74.597735 277.03343,69.982085 C281.1835,67.189645 285.52337,64.676055 289.73553,61.966815 C295.54034,57.777119 302.24983,55.421937 308.73553,52.579125 C314.84303,49.857955 321.18663,47.643845 327.48553,46.034765 C337.59407,43.230961 323.81995,42.651855 328.62443,33.409875 L333.97123,26.689535 L340.35333,29.455435 C354.83203,35.730175 356.87133,36.389515 359.64623,35.693075 C367.24414,32.255086 373.77027,26.2886 380.27033,21.095045 C387.99756,15.160835 395.34303,8.7203454 403.64553,3.5811954 L408.52523,0.72150536 L407.63033,9.1513954 C407.13823,13.787845 406.84313,22.981295 406.97463,29.581295 C407.24513,43.153775 407.71643,44.062395 415.58273,46.174035 C419.25183,47.158985 421.30593,47.871415 429.73553,51.082615 C436.84703,53.791695 450.28623,60.881965 456.92613,65.427785 C465.5399,70.294661 473.14318,76.341468 480.79533,82.533778 L498.73553,99.222818 L506.23553,98.744218 C523.69475,96.377728 541.14333,93.070168 558.23553,88.711028 C568.62373,85.886208 580.36373,83.081298 581.79893,83.081298 C582.58903,83.081298 583.23553,83.747688 583.23553,84.562168 C583.23553,85.376658 577.21433,98.314158 569.85513,113.31217 C560.94927,130.49827 553.14899,148.10704 547.39313,166.5813 C537.55193,199.4342 535.26153,213.17727 534.90053,241.53932 L534.73553,254.49734 C525.27895,260.28852 514.77524,263.5527 505.32283,269.37609 L500.91013,272.40131 C503.26407,274.5529 505.60518,276.7146 508.36193,278.33177 C511.08046,282.10825 498.08327,281.73762 496.25513,281.82171 C484.35249,281.25799 474.22117,287.32614 463.49203,291.50459 C448.01213,297.37424 454.03853,297.2157 501.89963,290.49414 C531.05203,286.40002 543.09593,283.73429 544.78443,281.00227 C545.97443,279.07668 553.00703,276.25052 563.01343,273.67663 C581.48113,268.92627 591.80913,262.6913 604.96353,248.35139 C609.72125,242.41637 615.58233,238.37451 622.26833,235.09759 C633.29893,229.61419 643.08973,236.3714 646.84283,252.05796 C648.67153,259.70116 648.57243,268.56908 646.61223,272.69986 C644.28563,277.60295 640.54163,279.84969 629.38283,283.03921 C617.29553,286.4941 610.40833,289.4675 609.59723,291.58118 C608.77503,293.72374 611.99393,297.00575 620.62663,302.82691 C627.00063,307.12497 643.70453,322.77331 648.73553,329.15957 C658.37703,341.39823 664.11173,355.27001 662.74253,363.0417 C661.44383,370.41334 660.10723,369.88673 651.97403,358.79905 C648.25513,353.72929 642.04743,346.2063 638.17903,342.0813 C632.74203,336.2837 633.36893,337.21583 640.94053,346.18783 C646.32783,352.57142 652.95183,361.48705 655.66053,366.00033 C660.08983,373.38021 660.57093,374.76335 660.44003,379.7396 C660.01766,389.39944 655.80167,397.7381 645.90653,399.0813 C643.70293,399.0813 643.46923,398.59558 642.95733,392.94959 C642.37433,386.52027 637.80763,376.10532 635.18873,375.23235 C634.21363,374.90733 634.37103,375.63317 635.71863,377.67563 C644.80633,391.44944 644.20133,400.86095 633.92053,405.64768 C610.96839,414.00262 594.39684,394.87795 577.20983,382.98357 C560.1478,370.90463 540.10668,360.98936 527.23553,343.9163 C527.23553,342.7937 521.89163,342.85427 519.03263,344.00927 C508.65398,346.63782 498.2446,349.40318 487.73553,351.48907 C478.45433,353.17146 469.0619,354.08688 459.73553,355.46417 C443.92583,357.96808 424.60213,359.10934 398.73553,359.06686 C373.30493,359.02509 360.89543,358.14433 348.23553,355.48263 C335.73903,352.85529 334.13923,353.22565 325.44353,360.75893 C321.20413,364.43162 317.36233,368.05547 316.90623,368.81193 C317.96457,378.76381 319.59961,388.78503 318.33513,399.05265 C316.31603,408.46708 309.23673,421.91089 302.87703,428.40774 C297.53753,433.86238 297.21243,434.46861 297.78243,437.90774 C299.55693,448.61516 315.52743,500.99907 320.24353,511.5813 C326.73361,527.95127 331.55425,544.92587 338.13283,561.26153 C343.13833,572.17962 347.27953,582.34119 348.22623,586.02806 C349.42453,590.6951 354.48323,604.77376 356.33003,608.5813 C358.07113,612.17095 356.32973,612.11161 387.45563,609.64187 C403.49765,607.63988 419.52178,607.6952 434.74323,613.54227 C441.97703,616.74142 449.46653,624.50089 453.60243,633.0813 C456.43723,638.96242 456.73553,640.48581 456.73553,649.0813 C456.73553,657.51612 456.41053,659.25405 453.83713,664.5813 C449.85563,672.82351 443.35043,680.86413 437.23553,685.10156 C433.57498,688.5502 429.42515,690.47295 424.95033,692.5126 C421.13173,694.98032 393.82153,696.99211 384.73553,695.47499 Z M369.23553,576.52722 C355.62503,573.60601 345.00903,567.8509 340.73133,561.07466 C338.30763,557.23526 333.70373,545.57555 325.53213,522.5813 C320.09883,507.29265 305.83803,461.4938 306.78463,460.5472 C307.64003,459.69184 309.92591,462.25606 311.93931,466.19044 C313.56311,469.36343 327.69893,489.64867 333.23553,497.56942 C339.75983,506.9032 354.13543,515.56501 365.92333,517.26499 C377.91813,518.99482 385.85943,517.77031 393.13253,513.06947 C400.51153,508.30024 401.55733,506.70761 404.22713,496.17487 C407.17903,484.52929 413.10423,477.60659 424.73553,472.2138 C430.03553,469.75648 440.66633,468.33447 447.12933,469.21834 C459.83693,470.95621 472.89193,480.66266 476.67633,491.1866 C479.22113,498.26368 478.38373,512.66201 474.83003,522.93164 C470.74553,534.73475 459.04743,550.83986 449.21233,558.20012 C438.74833,566.03101 418.56953,573.21408 397.73553,576.52434 C385.83283,578.41553 378.03733,578.41632 369.23553,576.52722 Z" id="body" fill="#000000"></path> <path d="M357.84375,47.25 C349.9649,47.445672 323.61277,54.357721 312.4375,59.15625 L305.40625,62.1875 L309.9375,66.59375 C313.24021,69.822792 314.43751,72.275339 314.4375,75.8125 C314.4375,78.469271 313.78572,80.65625 313,80.65625 C312.21429,80.65625 311.56249,79.977665 311.5625,79.15625 C311.5625,78.334822 309.99107,76.084807 308.0625,74.15625 C304.2295,70.323336 299.03046,69.713405 291.84375,72.21875 L287.375,73.75 L296.96875,83.5 C302.24518,88.852771 307.16315,93.295145 307.875,93.375 C308.58672,93.454829 316.93492,88.481281 326.4375,82.34375 C335.93993,76.206222 346.05509,69.787311 348.90625,68.0625 C356.05767,63.736243 366.1675,52.465712 365.5625,49.5 C365.16779,47.565057 363.58934,47.107287 357.84375,47.25 Z M410.125,58.125 C407.67154,58.220712 405.03896,58.581391 401.5625,59.15625 C381.6465,62.449507 348.99506,76.389658 324.5625,92.0625 C311.54879,100.41044 308.72646,103.62348 308.71875,109.90625 C308.70547,120.64863 298.51044,129.2102 285.75,129.21875 C273.852,129.22674 265.44233,125.72107 255.71875,116.71875 C247.29204,108.91711 247.19828,108.8688 244.25,111.53125 C238.66743,116.57238 227.39222,131.62422 223.6875,139 C219.25822,147.81849 213.03526,174.24418 213.03125,184.21875 C213.02497,199.47915 222.45163,228.35993 233.6875,247.53125 C245.72207,268.0651 259.68685,280.82576 277.75,287.78125 C296.47614,294.99203 327.36749,302.32315 346.5625,304.09375 C349.70536,304.38366 359.35715,304.31851 368,303.96875 C406.443,302.41324 455.59826,290.2103 478.78125,276.4375 C502.02897,262.62629 518.71875,233.94785 518.71875,207.8125 C518.71875,197.76228 516.82664,193.46447 509.1875,186.09375 C498.13692,175.43155 480.48929,169.91937 453,168.53125 C422.868,167.00968 396.84414,158.6362 385.875,146.96875 C383.125,144.0437 381.82143,142.01569 383,142.46875 C384.17857,142.9218 390.60266,145.58148 397.28125,148.375 C408.69225,153.14797 410.39085,153.47545 425.25,153.5 C443.35371,153.52993 451.95921,151.47341 462.0625,144.78125 C470.14707,139.42628 478.08973,129.50276 480.375,121.875 C484.14843,109.28051 474.60415,89.569116 458.375,76.4375 C446.07185,66.482643 438.22666,62.642021 424.4375,59.84375 C417.87089,58.511169 414.2141,57.965479 410.125,58.125 Z M412.4375,111.34375 C422.84593,121.66981 427.61401,130.21214 427,137.4375 C426.37843,144.75066 423.29597,145.06485 422.15625,137.9375 C420.43439,127.16955 407.59098,114.61432 388.78125,105.25 C373.61401,95.023511 355.8013,98.594538 338.71875,98.875 C338.71875,96.657643 349.40825,93.53165 359.90625,92.65625 C380.0046,90.253689 397.54224,98.502945 412.4375,111.34375 Z M245.03125,130.0625 C249.74111,143.06976 253.30547,147.93108 267.71875,161.0625 C283.36289,175.31528 289.33154,179.47832 308.90625,189.8125 C325.51082,198.57866 336.86097,202.56739 367.15625,210.28125 C386.65239,215.24537 389.34361,215.58913 408.71875,215.5 C429.72375,215.40336 439.88315,213.58705 454.75,207.34375 L460.0625,205.125 L458.71875,185.65625 L461.4375,193.90625 C464.9585,204.60799 469.41109,210.28171 481.53125,219.53125 C486.9641,223.67742 491.45672,227.56697 491.5,228.15625 C491.67243,230.50395 486.35648,228.97285 477.59375,224.15625 C472.52361,221.36939 468.21257,219.26673 468,219.5 C467.78757,219.73329 462.95852,227.82595 457.28125,237.46875 C442.74239,262.16335 430.99384,274.42733 413.90625,282.78125 C404.66897,287.29729 397.09429,289.83926 388,291.4375 C380.92857,292.68027 364.23214,293.94785 350.875,294.28125 C330.89885,294.7799 324.29432,294.43202 313.71875,292.21875 C281.14232,285.40113 272.55148,281.67697 261.59375,269.6875 C248.64533,255.51988 241.26168,237.71053 238.65625,214.34375 C236.80797,197.76798 238.38789,185.0208 244.46875,167.03125 L248.5625,154.90625 L244.1875,145.5625 C239.90465,136.41036 237.9784,123.64879 240.65625,122.09375 C241.97922,122.06176 243.97489,127.33932 245.03125,130.0625 Z M269.4375,251.875 C260.57922,255.90455 259.55227,257.89298 263.375,263.53125 C271.42157,275.39903 296.25738,286.43867 324.15625,290.53125 C337.30725,292.46042 357.04367,292.23739 371.03125,289.96875 C387.6184,287.27847 388.71875,286.80029 388.71875,282.5 C388.71875,276.1364 384.1634,270.70101 375.15625,266.3125 C360.70525,259.2716 350.69446,257.4456 329.59375,258.0625 C312.42689,258.56439 309.92903,259.0094 299.59375,263.25 C293.39389,265.79376 287.91623,267.48095 287.4375,267 C286.62636,266.1852 290.12315,262.8568 296.375,258.46875 C299.70357,256.13257 298.35066,253.80689 292.15625,251.21875 C284.77383,248.31577 276.7044,249.01528 269.4375,251.875 Z" id="face" fill="#FFFFFF"></path> </g> </g> </svg> </div> <div class="small-4 colums states"> <div class="state"> <span class="state-bar-bg"><span class="span-content Hapiness-bar" riot-style="{`width: ${this.happiness}%`}" id="{risky: riskyStat, medium: mediumStat}">{happiness}</span></span> <span>Hapiness</span> </div> <div class="state"> <span class="state-bar-bg"><span class="span-content Loveness-bar" riot-style="{`width: ${this.loveness}%`}">{loveness}</span></span> <span>Loveness</span> </div> <div class="state"> <span class="state-bar-bg"><span class="span-content Health-bar" riot-style="{`width: ${this.health}%`}">{health}</span></span> <span>Health</span> </div> <div class="state"> <span class="state-bar-bg"><span class="span-content Rage-bar" riot-style="{`width: ${this.rage}%`}">{rage}</span></span> <span>Rage</span> </div> </div> </div>', 'cat-behaviour .button-group,[data-is="cat-behaviour"] .button-group{ display: flex; flex-direction: column; min-width: 100px; transition: all .5s; margin-left: -5px; } cat-behaviour .button,[data-is="cat-behaviour"] .button{ transition: all .5s; } cat-behaviour .button:hover,[data-is="cat-behaviour"] .button:hover{ transform: translateX(5px); } cat-behaviour .button-group:hover,[data-is="cat-behaviour"] .button-group:hover{ box-shadow: 5px 5px 15px rgba(100, 100, 100, 0.5); } cat-behaviour .button-group:active,[data-is="cat-behaviour"] .button-group:active{ box-shadow: 0 0 0 rgba(100, 100, 100, 0.5); } cat-behaviour .cat,[data-is="cat-behaviour"] .cat{ width: 90%; } cat-behaviour .state,[data-is="cat-behaviour"] .state{ display: flex; justify-content: space-around; line-height: 20px; margin: 20px 0; } cat-behaviour .state-bar-bg,[data-is="cat-behaviour"] .state-bar-bg{ background: #eee; width: 60%; height: 20px; position: relative; } cat-behaviour .span-content,[data-is="cat-behaviour"] .span-content{ display: block; width: 100%; height:100%; background: #1779ba; transition: all .5s; color: #fff; } cat-behaviour .Rage-bar,[data-is="cat-behaviour"] .Rage-bar{ background: rgb(195, 53, 53); } cat-behaviour #risky,[data-is="cat-behaviour"] #risky{ background: rgb(195, 53, 53); } cat-behaviour #medium,[data-is="cat-behaviour"] #medium{ background: rgb(42, 198, 97); } cat-behaviour #die-shade,[data-is="cat-behaviour"] #die-shade{ -webkit-filter: grayscale(1); filter: grayscale(1); } cat-behaviour .catColor1,[data-is="cat-behaviour"] .catColor1{ fill: #1779ba; } cat-behaviour .catColor2,[data-is="cat-behaviour"] .catColor2{ fill: rgb(42, 198, 97); } cat-behaviour .catColor3,[data-is="cat-behaviour"] .catColor3{ fill: rgb(195, 53, 53); } cat-behaviour .catColor4,[data-is="cat-behaviour"] .catColor4{ fill: #aaa; } cat-behaviour #cat-svg,[data-is="cat-behaviour"] #cat-svg{ transition: all .5s; }', '', function(opts) {

    [this.happiness, this.loveness, this.health, this.rage] = [100, 100, 100, 0];
    this.riskyStat = false;
    this.mediumStat = false;
    var states = [this.happiness, this.loveness, this.health, this.rage];
    var that = this;
    this.die = false;
    [this.catColor1, this.catColor2, this.catColor3, this.catColor4] = [true, false, false, false];

    this.pat = function(){
      this.refs.pat.play();
      this.happiness += Math.floor(Math.random()*5);
      this.loveness += Math.floor(Math.random()*2);
      this.rage -= Math.floor(Math.random()*5);
      this.check();
    };

    this.touch = function(){
      this.refs.touch.play();
      this.happiness += Math.floor(Math.random()*3);
      this.loveness += Math.floor(Math.random()*2);
      this.rage -= Math.floor(Math.random()*3);
      this.check();
    };
    this.feed = function(){
      this.refs.feed.play();
      this.happiness += Math.floor(Math.random()*10);
      this.loveness += Math.floor(Math.random()*6);
      this.health += Math.floor(Math.random()*3);
      this.rage -= Math.floor(Math.random()*6);
      this.check();
    };
    this.beat = function(){
      this.refs.beat.play();
      this.happiness -= Math.floor(Math.random()*6);
      this.loveness -= Math.floor(Math.random()*4);
      this.health -= Math.floor(Math.random()*2);
      this.rage += Math.floor(Math.random()*7);
      this.check();
    };
    this.kick = function(){
        this.refs.kick.play();
        this.happiness -= Math.floor(Math.random()*10);
        this.loveness -= Math.floor(Math.random()*10);
        this.health -= Math.floor(Math.random()*5);
        this.rage += Math.floor(Math.random()*10);
        this.check();
    };
    this.play = function(){
      this.refs.pat.play();
      this.happiness += Math.floor(Math.random()*10);
      this.loveness += Math.floor(Math.random()*6);
      this.health += Math.floor(Math.random()*5);
      this.rage -= Math.floor(Math.random()*10);
      this.check();
    };
    this.shower = function(){
        this.refs.shower.play();
        this.happiness += Math.floor(Math.random()*5);
        this.loveness += Math.floor(Math.random()*4);
        this.health += Math.floor(Math.random()*7);
        this.rage -= Math.floor(Math.random()*7);
      this.check();
    };
    this.eat = function(){
      this.refs.eat.play();
      this.health = 0;
      this.stop();
    };

    this.check = function() {

      if(this.happiness > 100) {
        this.happiness = 100;
      }else if(this.happiness < 0) {
        this.happiness = 0;
      }else if (this.happiness < 80 && this.happiness > 30){
        this.mediumStat = true;
        this.riskyStat = false;
      }else if (this.happiness <= 30) {
        this.mediumStat = false;
        this.riskyStat = true;
      };

      if(this.loveness > 100) {
        this.loveness = 100;
      }else if(this.loveness < 0) {
        this.loveness = 0;
      };

      if(this.health > 100) {
        this.health = 100;
      }else if (this.happiness > 80){
        this.catColor1 = true;
        this.catColor2 = false;
        this.catColor3 = false;
        this.catColor4 = false;
      }else if (this.health < 80 && this.health > 30){
        this.catColor1 = false;
        this.catColor3 = false;
        this.catColor4 = false;
        this.catColor2 = true;
      }else if (this.health <= 30 && this.health > 0) {
        this.catColor1 = false;
        this.catColor2 = false;
        this.catColor4 = false;
        this.catColor3 = true;
      }else if(this.health <= 0) {
        this.health = 0;
        this.catColor1 = false;
        this.catColor2 = false;
        this.catColor3 = false;
        this.stop();
      };

      if(this.rage < 0) {
        this.rage = 0;
      }else if(this.rage > 100) {
        this.rage = 100;
      };
    };

    this.stop = function() {
      this.die = true;
      this.catColor4 = true;
      setTimeout(function(){
        alert("your cat is dead")
      }, 1000);
    }

    this.changeStateValue = function(stateName, dir, randomValue) {
      if(dir){
        stateName += Math.floor(Math.random()*randomValue);
        console.log(stateName)
        return
      }
        stateName -= Math.floor(Math.random()*randomValue);
    }

});
